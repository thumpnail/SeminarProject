<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Chat.Common/Models/ChatRoom.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Chat.Common/Models/ChatRoom.cs" />
              <option name="originalContent" value="namespace Chat.Common.Models;&#10;&#10;public class ChatRoom {&#10;    public required Identifier Id { get; set; }&#10;    public required List&lt;Identifier&gt; UserIds { get; set; }&#10;    public required List&lt;Identifier&gt; MessageIds { get; set; }&#10;}" />
              <option name="updatedContent" value="namespace Chat.Common.Models;&#13;&#10;&#13;&#10;public class ChatRoom {&#13;&#10;    public required Identifier Id { get; set; }&#13;&#10;    public required string Name { get; set; } // Raumname&#13;&#10;    public required bool IsPrivate { get; set; } // privat/öffentlich&#13;&#10;    public required List&lt;Identifier&gt; UserIds { get; set; }&#13;&#10;    public required List&lt;Identifier&gt; MessageIds { get; set; }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Chat.Common/Models/Message.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Chat.Common/Models/Message.cs" />
              <option name="originalContent" value="namespace Chat.Common.Models;&#10;&#10;public class Message {&#10;    public required Identifier ID { get; set; }&#10;    public required Identifier UserId { get; set; }&#10;    public required string Content { get; set; }&#10;    public required DateTime Timestamp { get; set; }&#10;}" />
              <option name="updatedContent" value="namespace Chat.Common.Models;&#13;&#10;&#13;&#10;public class Message {&#13;&#10;    public required Identifier ID { get; set; }&#13;&#10;    public required Identifier UserId { get; set; } // Sender&#13;&#10;    public required Identifier ReceiverId { get; set; } // Empfänger (optional für Direktnachrichten)&#13;&#10;    public required Identifier ChatRoomId { get; set; } // Referenz auf den Raum&#13;&#10;    public required string Content { get; set; }&#13;&#10;    public required DateTime Timestamp { get; set; }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Minimal/ChatDatabaseService/ChatDatabaseService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Minimal/ChatDatabaseService/ChatDatabaseService.cs" />
              <option name="originalContent" value="using Chat.Common.Models;&#10;using Microsoft.AspNetCore.Builder;&#10;using Microsoft.AspNetCore.Http;&#10;using Microsoft.Extensions.DependencyInjection;&#10;using Microsoft.Extensions.Hosting;&#10;const string DATABASE_PATH = &quot;./chat.db&quot;;&#10;&#10;var db = new LiteDB.LiteDatabase(DATABASE_PATH);&#10;&#10;var chatsCollection = db.GetCollection&lt;ChatRoom&gt;(&quot;chats&quot;);&#10;var usersCollection = db.GetCollection&lt;User&gt;(&quot;users&quot;);&#10;var messagesCollection = db.GetCollection&lt;Message&gt;(&quot;messages&quot;);&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Services registrieren&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;var app = builder.Build();&#10;&#10;// Swagger aktivieren&#10;if (app.Environment.IsDevelopment())&#10;{&#10;}&#10;&#10;// Beispiel-Endpunkt&#10;app.MapGet(&quot;/&quot;, () =&gt; &quot;Type=ChatDatabaseService&quot;);&#10;app.MapPost(&quot;/login&quot;, () =&gt; {&#10;    // Hier könnte Logik zum Erstellen eines neuen Benutzers oder einer neuen Nachricht stehen&#10;    return Results.Ok(&quot;User or message created successfully.&quot;);&#10;});&#10;&#10;app.Run(Chat.Common.Addresses.CHAT_DB_SERVICE);" />
              <option name="updatedContent" value="using Chat.Common.Models;&#13;&#10;using Microsoft.AspNetCore.Builder;&#13;&#10;using Microsoft.AspNetCore.Http;&#13;&#10;using Microsoft.Extensions.DependencyInjection;&#13;&#10;using Microsoft.Extensions.Hosting;&#13;&#10;const string DATABASE_PATH = &quot;./chat.db&quot;;&#13;&#10;&#13;&#10;var db = new LiteDB.LiteDatabase(DATABASE_PATH);&#13;&#10;&#13;&#10;var chatsCollection = db.GetCollection&lt;ChatRoom&gt;(&quot;chats&quot;);&#13;&#10;var usersCollection = db.GetCollection&lt;User&gt;(&quot;users&quot;);&#13;&#10;var messagesCollection = db.GetCollection&lt;Message&gt;(&quot;messages&quot;);&#13;&#10;&#13;&#10;var builder = WebApplication.CreateBuilder(args);&#13;&#10;&#13;&#10;// Services registrieren&#13;&#10;builder.Services.AddEndpointsApiExplorer();&#13;&#10;&#13;&#10;var app = builder.Build();&#13;&#10;&#13;&#10;// Swagger aktivieren&#13;&#10;if (app.Environment.IsDevelopment())&#13;&#10;{&#13;&#10;}&#13;&#10;&#13;&#10;// Beispiel-Endpunkt&#13;&#10;app.MapGet(&quot;/&quot;, () =&gt; &quot;Type=ChatDatabaseService&quot;);&#13;&#10;app.MapPost(&quot;/login&quot;, () =&gt; {&#13;&#10;    // Hier könnte Logik zum Erstellen eines neuen Benutzers oder einer neuen Nachricht stehen&#13;&#10;    return Results.Ok(&quot;User or message created successfully.&quot;);&#13;&#10;});&#13;&#10;app.MapPost(&quot;/register&quot;, async ([FromBody] User user) =&gt; {&#13;&#10;    usersCollection.Insert(user);&#13;&#10;    return Results.Ok(user);&#13;&#10;});&#13;&#10;&#13;&#10;app.MapPost(&quot;/createroom&quot;, async ([FromBody] ChatRoom room) =&gt; {&#13;&#10;    chatsCollection.Insert(room);&#13;&#10;    return Results.Ok(room);&#13;&#10;});&#13;&#10;&#13;&#10;app.MapPost(&quot;/addusertoroom&quot;, async ([FromBody] dynamic payload) =&gt; {&#13;&#10;    var roomId = (string)payload.roomId;&#13;&#10;    var userId = (string)payload.userId;&#13;&#10;    var room = chatsCollection.FindById(roomId);&#13;&#10;    if (room == null) return Results.NotFound(&quot;Room not found&quot;);&#13;&#10;    if (!room.UserIds.Contains(userId)) room.UserIds.Add(userId);&#13;&#10;    chatsCollection.Update(room);&#13;&#10;    return Results.Ok(room);&#13;&#10;});&#13;&#10;&#13;&#10;app.MapPost(&quot;/sendmessage&quot;, async ([FromBody] Message message) =&gt; {&#13;&#10;    messagesCollection.Insert(message);&#13;&#10;    var room = chatsCollection.FindById(message.ChatRoomId);&#13;&#10;    if (room != null) {&#13;&#10;        room.MessageIds.Add(message.ID);&#13;&#10;        chatsCollection.Update(room);&#13;&#10;    }&#13;&#10;    return Results.Ok(message);&#13;&#10;});&#13;&#10;&#13;&#10;app.MapGet(&quot;/messages/{roomId}&quot;, (string roomId) =&gt; {&#13;&#10;    var room = chatsCollection.FindById(roomId);&#13;&#10;    if (room == null) return Results.NotFound(&quot;Room not found&quot;);&#13;&#10;    var msgs = messagesCollection.Find(m =&gt; room.MessageIds.Contains(m.ID)).ToList();&#13;&#10;    return Results.Ok(msgs);&#13;&#10;});&#13;&#10;&#13;&#10;app.MapGet(&quot;/rooms/{userId}&quot;, (string userId) =&gt; {&#13;&#10;    var rooms = chatsCollection.Find(r =&gt; r.UserIds.Contains(userId)).ToList();&#13;&#10;    return Results.Ok(rooms);&#13;&#10;});&#13;&#10;&#13;&#10;app.Run(Chat.Common.Addresses.CHAT_DB_SERVICE);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Minimal/ChatHistoryService/ChatHistoryService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Minimal/ChatHistoryService/ChatHistoryService.cs" />
              <option name="originalContent" value="using Chat.Common.Contracts;&#10;using Chat.Common.Contracts.Contracts;&#10;using Microsoft.AspNetCore.Builder;&#10;using Microsoft.AspNetCore.Http;&#10;using Microsoft.AspNetCore.Mvc;&#10;using Microsoft.Extensions.DependencyInjection;&#10;using Microsoft.Extensions.Hosting;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Services registrieren&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;var app = builder.Build();&#10;&#10;// Swagger aktivieren&#10;if (app.Environment.IsDevelopment())&#10;{&#10;}&#10;&#10;// Beispiel-Endpunkt&#10;app.MapGet(&quot;/&quot;, () =&gt; &quot;Type=ChatHistoryService&quot;);&#10;app.MapPost(&quot;/history&quot;, ([FromBody] HistoryRetrieveContract historyContract) =&gt; {&#10;    // Hier könnte Logik zum Abrufen der ChatRoom-Historie stehen&#10;    Console.WriteLine($&quot;History request for user: {null}&quot;);&#10;    &#10;    // Beispielhafte Antwort&#10;    var response = new HistoryResponseContract {&#10;        UserId = Guid.NewGuid().ToString(),&#10;        ChatId = Guid.NewGuid().ToString(),&#10;        Messages = []&#10;    };&#10;    return Results.Json(response);&#10;});&#10;&#10;app.Run(Chat.Common.Addresses.CHAT_HISTORY_SERVICE);" />
              <option name="updatedContent" value="using Chat.Common.Contracts;&#13;&#10;using Chat.Common.Contracts.Contracts;&#13;&#10;using Microsoft.AspNetCore.Builder;&#13;&#10;using Microsoft.AspNetCore.Http;&#13;&#10;using Microsoft.AspNetCore.Mvc;&#13;&#10;using Microsoft.Extensions.DependencyInjection;&#13;&#10;using Microsoft.Extensions.Hosting;&#13;&#10;&#13;&#10;var builder = WebApplication.CreateBuilder(args);&#13;&#10;&#13;&#10;// Services registrieren&#13;&#10;builder.Services.AddEndpointsApiExplorer();&#13;&#10;&#13;&#10;var app = builder.Build();&#13;&#10;&#13;&#10;// Swagger aktivieren&#13;&#10;if (app.Environment.IsDevelopment())&#13;&#10;{&#13;&#10;}&#13;&#10;&#13;&#10;// Beispiel-Endpunkt&#13;&#10;app.MapGet(&quot;/&quot;, () =&gt; &quot;Type=ChatHistoryService&quot;);&#13;&#10;app.MapPost(&quot;/history&quot;, ([FromBody] HistoryRetrieveContract historyContract) =&gt; {&#13;&#10;    // Hier könnte Logik zum Abrufen der ChatRoom-Historie stehen&#13;&#10;    // TODO: call DB Service to get messages for room and time range&#13;&#10;    var response = new HistoryResponseContract {&#13;&#10;        UserId = historyContract.UserId,&#13;&#10;        ChatId = historyContract.ChatId,&#13;&#10;        Messages = new List&lt;Chat.Common.Models.Message&gt;() // TODO: mit echten Nachrichten füllen&#13;&#10;    };&#13;&#10;    return Results.Json(response);&#13;&#10;});&#13;&#10;&#13;&#10;app.Run(Chat.Common.Addresses.CHAT_HISTORY_SERVICE);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Minimal/ChatMessagingService/ChatMessagingService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Minimal/ChatMessagingService/ChatMessagingService.cs" />
              <option name="originalContent" value="using Chat.Common.Contracts;&#10;using MessagePack;&#10;using Microsoft.AspNetCore.Builder;&#10;using Microsoft.AspNetCore.Hosting;&#10;using Microsoft.AspNetCore.Http;&#10;using Microsoft.AspNetCore.Mvc;&#10;using Microsoft.Extensions.DependencyInjection;&#10;using Microsoft.Extensions.Hosting;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container (optional)&#10;builder.Services.AddEndpointsApiExplorer();&#10;//builder.Services.AddSwaggerGen();&#10;&#10;var app = builder.Build();&#10;&#10;// Optional: Swagger UI&#10;if (app.Environment.IsDevelopment()) {&#10;    //app.UseSwagger();&#10;    //app.UseSwaggerUI();&#10;}&#10;&#10;// Define a simple endpoint&#10;app.MapGet(&quot;/&quot;, () =&gt; &quot;Type=ChatMessagingService&quot;);&#10;app.MapGet(&quot;/welcome&quot;, (string ab) =&gt; &quot;Welcome to the ChatRoom Messaging Service!&quot;);&#10;app.MapPost(&quot;/send&quot;, ([FromBody] MessageSendContract messageSend) =&gt; {&#10;    Console.WriteLine($&quot;Message received: {messageSend.Content ?? &quot;No content&quot;} from {messageSend.Sender} to {messageSend.Receiver}&quot;);&#10;    &#10;    var responseMessage = new MessageSendResponseContract {&#10;        Message = (messageSend.Content ?? &quot;&quot;),&#10;        Success = true&#10;    };&#10;    return Results.Json(responseMessage);&#10;});&#10;app.MapPost(&quot;/getmessages&quot;, () =&gt; {&#10;    Console.WriteLine(&quot;Heartbeat received&quot;);&#10;    &#10;    return Results.Ok();&#10;});&#10;// Define a login endpoint&#10;app.MapPost(&quot;/login&quot;, ([FromBody] LoginContract loginContract) =&gt; {&#10;    Console.WriteLine($&quot;Login attempt for user: {loginContract.Username} with password: {loginContract.Password}&quot;);&#10;    return Results.Json(new LoginResponseContract {&#10;        Message = &quot;Login successful&quot;,&#10;        Success = true&#10;    });&#10;});&#10;app.MapGet(&quot;/logout&quot;, () =&gt; {&#10;    return Results.Ok();&#10;});&#10;&#10;// Run the web server&#10;app.Run(Chat.Common.Addresses.CHAT_MESSAGING_SERVICE);" />
              <option name="updatedContent" value="using Chat.Common.Contracts;&#13;&#10;using MessagePack;&#13;&#10;using Microsoft.AspNetCore.Builder;&#13;&#10;using Microsoft.AspNetCore.Hosting;&#13;&#10;using Microsoft.AspNetCore.Http;&#13;&#10;using Microsoft.AspNetCore.Mvc;&#13;&#10;using Microsoft.Extensions.DependencyInjection;&#13;&#10;using Microsoft.Extensions.Hosting;&#13;&#10;&#13;&#10;var builder = WebApplication.CreateBuilder(args);&#13;&#10;&#13;&#10;// Add services to the container (optional)&#13;&#10;builder.Services.AddEndpointsApiExplorer();&#13;&#10;//builder.Services.AddSwaggerGen();&#13;&#10;&#13;&#10;var app = builder.Build();&#13;&#10;&#13;&#10;// Optional: Swagger UI&#13;&#10;if (app.Environment.IsDevelopment()) {&#13;&#10;    //app.UseSwagger();&#13;&#10;    //app.UseSwaggerUI();&#13;&#10;}&#13;&#10;&#13;&#10;// Define a simple endpoint&#13;&#10;app.MapGet(&quot;/&quot;, () =&gt; &quot;Type=ChatMessagingService&quot;);&#13;&#10;app.MapGet(&quot;/welcome&quot;, (string ab) =&gt; &quot;Welcome to the ChatRoom Messaging Service!&quot;);&#13;&#10;app.MapPost(&quot;/send&quot;, async ([FromBody] MessageSendContract messageSend) =&gt; {&#13;&#10;    // TODO: call DB Service to persist message&#13;&#10;    // TODO: notify user (simulate)&#13;&#10;    var responseMessage = new MessageSendResponseContract {&#13;&#10;        Message = messageSend.Content ?? &quot;&quot;,&#13;&#10;        Success = true&#13;&#10;    };&#13;&#10;    return Results.Json(responseMessage);&#13;&#10;});&#13;&#10;app.MapPost(&quot;/getmessages&quot;, () =&gt; {&#13;&#10;    Console.WriteLine(&quot;Heartbeat received&quot;);&#13;&#10;    &#13;&#10;    return Results.Ok();&#13;&#10;});&#13;&#10;// Define a login endpoint&#13;&#10;app.MapPost(&quot;/login&quot;, ([FromBody] LoginContract loginContract) =&gt; {&#13;&#10;    Console.WriteLine($&quot;Login attempt for user: {loginContract.Username} with password: {loginContract.Password}&quot;);&#13;&#10;    return Results.Json(new LoginResponseContract {&#13;&#10;        Message = &quot;Login successful&quot;,&#13;&#10;        Success = true&#13;&#10;    });&#13;&#10;});&#13;&#10;app.MapGet(&quot;/logout&quot;, () =&gt; {&#13;&#10;    return Results.Ok();&#13;&#10;});&#13;&#10;&#13;&#10;// User und Raumverwaltung&#13;&#10;app.MapPost(&quot;/createroom&quot;, ([FromBody] dynamic payload) =&gt; {&#13;&#10;    // payload: { name, isPrivate, userIds }&#13;&#10;    var room = new Chat.Common.Models.ChatRoom {&#13;&#10;        Id = Guid.NewGuid().ToString(),&#13;&#10;        Name = payload.name,&#13;&#10;        IsPrivate = payload.isPrivate,&#13;&#10;        UserIds = ((IEnumerable&lt;string&gt;)payload.userIds).ToList(),&#13;&#10;        MessageIds = new List&lt;string&gt;()&#13;&#10;    };&#13;&#10;    // TODO: call DB Service to persist room&#13;&#10;    return Results.Ok(room);&#13;&#10;});&#13;&#10;&#13;&#10;app.MapPost(&quot;/notify&quot;, ([FromBody] dynamic payload) =&gt; {&#13;&#10;    // Simuliere Benachrichtigung&#13;&#10;    return Results.Ok($&quot;User {payload.userId} notified for new messages in room {payload.roomId}&quot;);&#13;&#10;});&#13;&#10;&#13;&#10;// Run the web server&#13;&#10;app.Run(Chat.Common.Addresses.CHAT_MESSAGING_SERVICE);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>