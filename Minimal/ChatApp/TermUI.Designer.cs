
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v2.0.0.0
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// -----------------------------------------------------------------------------
using JetBrains.Annotations;
namespace ChatApp.UI {
    using System;
    using Terminal.Gui;
    using Terminal.Gui.App;
    using Terminal.Gui.Drawing;
    using Terminal.Gui.Input;
    using Terminal.Gui.ViewBase;
    using Terminal.Gui.Views;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Drawing;
    using Terminal.Gui.Text;
    using Color = Terminal.Gui.Drawing.Color;

    public partial class TermUI : Terminal.Gui.Views.Window {

        List<string> messages = [];

        public StatusBar statusBar { get; private set; }
        public ListView messageList { get; private set; }
        public TextField messageField { get; private set; }

        private void InitializeComponent() {
            //Application.QuitKey = Key.Esc;
            this.Width = Dim.Fill(0);
            this.Height = Dim.Fill(0);
            this.X = 0;
            this.Y = 0;
            this.Visible = true;
            this.Arrangement = Terminal.Gui.ViewBase.ViewArrangement.Overlapped;
            this.CanFocus = true;
            this.ShadowStyle = Terminal.Gui.ViewBase.ShadowStyle.None;
            this.Modal = false;
            this.TextAlignment = Terminal.Gui.ViewBase.Alignment.Start;
            this.Title = "Chat Application";

            #region messageList
            messageList = new ListView() {
                X = 1,
                Y = 1,
                Width = Dim.Fill(1),
                Height = Dim.Fill(5),
                Text = "",
                TextAlignment = Terminal.Gui.ViewBase.Alignment.Start,
                CanFocus = false,
                Arrangement = ViewArrangement.Fixed,
                VerticalScrollBar = { Width = 1, Visible = true, CanFocus = false, BorderStyle = LineStyle.Rounded,
                                  TextDirection = TextDirection.LeftRight_TopBottom },
                Source = messages as IListDataSource,
            };
            messageList.SetSource(new ObservableCollection<string>(messages));
            this.Add(messageList);
            #endregion

            #region messageField
            messageField = new TextField() {
                X = 2,
                Y = Pos.Percent(100) - 4,
                Width = Dim.Fill(1),
                Height = 1,
                TextAlignment = Alignment.Start,
                CanFocus = true,
                Arrangement = ViewArrangement.Fixed,
                CaptionColor = Color.White,

            };
            messageField.KeyDown += (_, pressedKey) => {
                if (pressedKey == Key.Enter) {
                    // Handle message sending logic here
                    // For example, send the message to the server or display it in the chat view
                    var message = messageField.Text.ToString();
                    if (!string.IsNullOrWhiteSpace(message)) {
                        // Add message to chat view or send to server
                        AddMessages(("You", message));
                        Program
                        // clearing the field
                        messageField.Text = string.Empty;
                    }
                }
            };
            this.Add(messageField);
            #endregion

            #region statusBar
            statusBar = new StatusBar() {
                X = 0,
                Y = Pos.Percent(100) - 1,
                Width = Dim.Fill(0),
                Height = Dim.Auto(),
                Text = "Status: Ready",
                CanFocus = false,
                Arrangement = ViewArrangement.Fixed
            };
            this.Add(statusBar);
            #endregion
            //this.KeyDown += (_, Key) => {
            //    if (Key == Key.Esc) {
            //        Application.RequestStop();
            //    }
            //};
        }
        private void UpdateListView() {
            messageList.SetSource(new ObservableCollection<string>(messages));
        }
        public void AddMessages(params (string username, string message)[] newMessages) {
            foreach (var message in newMessages) {
                messages.Add(message.username + ": " + message.message);
            }
            UpdateListView();
        }
    }
}
