<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Chat.Tests/BenchmarkTesterBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Chat.Tests/BenchmarkTesterBase.cs" />
              <option name="updatedContent" value="using System.Text;&#10;using LiteDB;&#10;using System.Threading;&#10;using System.Collections.Generic;&#10;using System;&#10;&#10;namespace Chat.Tests {&#10;    public abstract class BenchmarkTesterBase : ATester {&#10;        protected string runIndexIdentifier;&#10;        protected List&lt;string&gt; usernames = new();&#10;        protected Random rand = new();&#10;        protected List&lt;Thread&gt; threads = new();&#10;        protected string connectionString { get; set; }&#10;        protected int threadCount;&#10;        protected int msgCount;&#10;        protected int threadThrottle;&#10;        protected DateTime startTime = DateTime.MinValue;&#10;        protected DateTime endTime = DateTime.MinValue;&#10;        public StringBuilder ReportBuilder { get; set; } = new StringBuilder();&#10;&#10;        public BenchmarkTesterBase(string connectionString, int maxThreads, int maxMessages, int threadThrottle) {&#10;            this.connectionString = connectionString;&#10;            this.threadThrottle = threadThrottle;&#10;            threadCount = maxThreads;&#10;            msgCount = maxMessages;&#10;            for (int i = 0; i &lt; 100; i++) {&#10;                usernames.Add($&quot;user{i + 1}&quot;);&#10;            }&#10;            runIndexIdentifier = Guid.NewGuid().ToString();&#10;        }&#10;&#10;        public override void Run() {&#10;            startTime = DateTime.UtcNow;&#10;            using (LiteDatabase db = new(connectionString)) {&#10;                var dataCollection = db.GetCollection&lt;Data&gt;(&quot;data&quot;);&#10;                for (int i = 0; i &lt; threadCount; i++) {&#10;                    var thread = new Thread(() =&gt; ExecuteBenchmarkThread(dataCollection));&#10;                    threads.Add(thread);&#10;                    thread.Start();&#10;                    Thread.Sleep(threadThrottle);&#10;                }&#10;                foreach (var t in threads) t.Join();&#10;            }&#10;            endTime = DateTime.UtcNow;&#10;        }&#10;&#10;        protected abstract void ExecuteBenchmarkThread(ILiteCollection&lt;Data&gt; dataCollection);&#10;&#10;        public override string Report() {&#10;            using (LiteDatabase db = new(connectionString)) {&#10;                var dataCollection = db.GetCollection&lt;Data&gt;(&quot;data&quot;);&#10;                ReportBuilder.AppendLine($&quot;{GetType().Name} Benchmark Report\n&quot;);&#10;                ReportBuilder.AppendLine($&quot;Run Index Identifier: {runIndexIdentifier}&quot;);&#10;                ReportBuilder.AppendLine($&quot;Anzahl Threads: {threadCount}&quot;);&#10;                ReportBuilder.AppendLine($&quot;Anzahl Nachrichten pro Thread: {msgCount}&quot;);&#10;                ReportBuilder.AppendLine($&quot;Thread Throttle: {threadThrottle} ms&quot;);&#10;                ReportBuilder.AppendLine($&quot;Startzeit: {startTime:HH:mm:ss.fff}&quot;);&#10;                ReportBuilder.AppendLine($&quot;Endzeit: {endTime:HH:mm:ss.fff}&quot;);&#10;                ReportBuilder.AppendLine($&quot;Dauer: {(endTime - startTime).TotalSeconds:F3} Sekunden\n&quot;);&#10;                ReportBuilder.AppendLine($&quot;Benchmark abgeschlossen: {dataCollection.Count()} Requests verarbeitet.&quot;);&#10;                var reportData = dataCollection.Find(x =&gt; x.runIndexIdentifier == runIndexIdentifier).ToList();&#10;                var groupedData = reportData&#10;                    .GroupBy(d =&gt; d.endpoint)&#10;                    .Select(g =&gt; new {&#10;                        Endpoint = g.Key,&#10;                        Count = g.Count(),&#10;                        AvgDuration = g.Average(d =&gt; d.durationMs),&#10;                        MinDuration = g.Min(d =&gt; d.durationMs),&#10;                        MaxDuration = g.Max(d =&gt; d.durationMs)&#10;                    })&#10;                    .ToList();&#10;                foreach (var endpointData in groupedData) {&#10;                    ReportBuilder.AppendLine($&quot;Endpoint: {endpointData.Endpoint}&quot;);&#10;                    ReportBuilder.AppendLine($&quot;  Requests: {endpointData.Count}&quot;);&#10;                    ReportBuilder.AppendLine($&quot;  Avg Duration: {endpointData.AvgDuration:F2} ms&quot;);&#10;                    ReportBuilder.AppendLine($&quot;  Min Duration: {endpointData.MinDuration:F2} ms&quot;);&#10;                    ReportBuilder.AppendLine($&quot;  Max Duration: {endpointData.MaxDuration:F2} ms&quot;);&#10;                }&#10;                return ReportBuilder.ToString();&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Chat.Tests/ChatMicroserviceATester.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Chat.Tests/ChatMicroserviceATester.cs" />
              <option name="originalContent" value="using System.Text;&#10;&#10;using ChatApp.Client;&#10;&#10;using LiteDB;&#10;namespace Chat.Tests;&#10;&#10;public class ChatMicroserviceATester : ATester {&#10;string runIndexIdentifier;&#10;&#10;    List&lt;string&gt; usernames = new List&lt;string&gt;();&#10;&#10;    // Benchmark: Simuliere parallele NachrichtenÃ¼bertragung&#10;    Random rand = new();&#10;    List&lt;Thread&gt; threads = new();&#10;&#10;    string connectionString {get;set;}&#10;&#10;    int msgCount = 50;&#10;    int threadCount = 100;&#10;    int threadThrottle = 500;&#10;&#10;    DateTime startTime = DateTime.MinValue;&#10;    DateTime endTime = DateTime.MinValue;&#10;&#10;    public ChatMicroserviceATester(string connectionString, int maxThreads, int maxMessages, int threadThrottle) {&#10;        this.threadThrottle = threadThrottle;&#10;        this.connectionString = connectionString;&#10;        threadCount = maxThreads;&#10;        msgCount = maxMessages;&#10;        for (int i = 0; i &lt; 100; i++) {&#10;            usernames.Add($&quot;user{i + 1}&quot;);&#10;        }&#10;        runIndexIdentifier = Guid.NewGuid().ToString();&#10;    }&#10;    public override void Run() {&#10;        startTime = DateTime.UtcNow;&#10;        using (LiteDatabase db = new(connectionString)) {&#10;            var dataCollection = db.GetCollection&lt;Data&gt;(&quot;data&quot;);&#10;            for (int i = 0; i &lt; threadCount; i++) {&#10;                var thread = new Thread(() =&gt; {&#10;                    var messagingClient = new HttpClient {&#10;                        BaseAddress = new(Chat.Common.Addresses.CHAT_MESSAGING_SERVICE),&#10;                        Timeout = TimeSpan.FromSeconds(200)&#10;                    };&#10;                    var historyClient = new HttpClient {&#10;                        BaseAddress = new(Chat.Common.Addresses.CHAT_HISTORY_SERVICE),&#10;                        Timeout = TimeSpan.FromSeconds(200)&#10;                    };&#10;                    var sender = usernames[rand.Next(usernames.Count)];&#10;                    var receiver = usernames[rand.Next(usernames.Count)];&#10;                    if (sender == receiver) return;&#10;                    // Get room information&#10;                    Console.WriteLine(&quot;Getting room for: &quot; + sender + &quot; -&gt; &quot; + receiver);&#10;                    var getRoomStart = DateTime.UtcNow;&#10;                    var roomId = messagingClient.GetRoomAsync(sender, [receiver]);&#10;                    roomId.Wait(TimeSpan.FromSeconds(200));&#10;                    var roomDuration = (float)(DateTime.UtcNow - getRoomStart).TotalMilliseconds;&#10;                    dataCollection.Insert(new Data(runIndexIdentifier, &quot;microservice&quot;, &quot;/room&quot;, getRoomStart, roomDuration, sender, receiver));&#10;&#10;                    Console.WriteLine(&quot;Getting chat history for: &quot; + sender + &quot; -&gt; &quot; + receiver);&#10;                    var getHistoryStart = DateTime.UtcNow;&#10;                    var historyTask = historyClient.GetChatHistory(roomId.Result);&#10;                    historyTask.Wait(TimeSpan.FromSeconds(200));&#10;                    var histroyDuration = (float)(DateTime.UtcNow - getHistoryStart).TotalMilliseconds;&#10;                    dataCollection.Insert(new Data(runIndexIdentifier, &quot;microservice&quot;, &quot;/history&quot;, getHistoryStart, histroyDuration, sender, receiver));&#10;&#10;                    // Sende mehrere Nachrichten und messe die Zeit pro Nachricht&#10;&#10;                    Console.WriteLine(&quot;Sending messages for: &quot; + sender + &quot; -&gt; &quot; + receiver);&#10;                    for (int msgIdx = 0; msgIdx &lt; msgCount; msgIdx++) {&#10;                        var msgStart = DateTime.UtcNow;&#10;                        var sendTask = messagingClient.SendMessageAsync(new(sender, roomId.Result, $&quot;{sender}:Message{msgIdx} -&gt; {receiver}&quot;, DateTime.UtcNow));&#10;                        try {&#10;                            sendTask.Wait(TimeSpan.FromSeconds(200));&#10;                        } catch (AggregateException ex) {&#10;                            // Fehlerbehandlung, z.B. Timeout&#10;                            continue;&#10;                        }&#10;                        var duration = (float)(DateTime.UtcNow - msgStart).TotalMilliseconds;&#10;                        dataCollection.Insert(new Data(runIndexIdentifier, &quot;microservice&quot;, &quot;/send&quot;, msgStart, duration, sender, receiver));&#10;                        Thread.Sleep(1000);&#10;                    }&#10;                });&#10;                threads.Add(thread);&#10;                thread.Start();&#10;                Thread.Sleep(threadThrottle);&#10;            }&#10;            // Warten bis alle Threads fertig sind&#10;            foreach (var t in threads) t.Join();&#10;        }&#10;        endTime = DateTime.UtcNow;&#10;    }&#10;    public StringBuilder ReportBuilder { get; set; } = new StringBuilder();&#10;    public override string Report() {&#10;        using (LiteDatabase db = new(connectionString)) {&#10;            var dataCollection = db.GetCollection&lt;Data&gt;(&quot;data&quot;);&#10;            ReportBuilder.AppendLine($&quot;{nameof(ChatMicroserviceATester)} Benchmark Report\n&quot;);&#10;            ReportBuilder.AppendLine($&quot;Run Index Identifier: {runIndexIdentifier}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Anzahl Threads: {threadCount}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Anzahl Nachrichten pro Thread: {msgCount}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Thread Throttle: {threadThrottle} ms&quot;);&#10;            ReportBuilder.AppendLine($&quot;Startzeit: {startTime:HH:mm:ss.fff}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Endzeit: {endTime:HH:mm:ss.fff}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Dauer: {(startTime - endTime).TotalSeconds:F3} Sekunden\n&quot;);&#10;            // Ergebnisse ausgeben&#10;            ReportBuilder.AppendLine($&quot;Benchmark abgeschlossen: {dataCollection.Count()} Requests verarbeitet.&quot;);&#10;            //Console.WriteLine(&quot;Beispielmessungen:&quot;);&#10;            //foreach (var d in dataCollection.FindAll().Take(10)) {&#10;            //    Console.WriteLine($&quot;{d.timestamp:HH:mm:ss.fff} | {d.durationMs} ms | {d.sender} -&gt; {d.receiver}&quot;);&#10;            //}&#10;&#10;            // #report&#10;            var reportData = dataCollection.Find(x =&gt; x.runIndexIdentifier == runIndexIdentifier).ToList();&#10;&#10;            var groupedData = reportData&#10;                .GroupBy(d =&gt; d.endpoint)&#10;                .Select(g =&gt; new {&#10;                    Endpoint = g.Key,&#10;                    Count = g.Count(),&#10;                    AvgDuration = g.Average(d =&gt; d.durationMs),&#10;                    MinDuration = g.Min(d =&gt; d.durationMs),&#10;                    MaxDuration = g.Max(d =&gt; d.durationMs)&#10;                })&#10;                .ToList();&#10;&#10;            Console.WriteLine(&quot;Benchmark Report:&quot;);&#10;            foreach (var endpointData in groupedData) {&#10;                ReportBuilder.AppendLine($&quot;Endpoint: {endpointData.Endpoint}&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Requests: {endpointData.Count}&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Avg Duration: {endpointData.AvgDuration:F2} ms&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Min Duration: {endpointData.MinDuration:F2} ms&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Max Duration: {endpointData.MaxDuration:F2} ms&quot;);&#10;            }&#10;&#10;&#10;            // Ergebnisse in CSV-Datei schreiben&#10;            //using (var writer = new StreamWriter(&quot;benchmark_results.csv&quot;))&#10;            //using (var csv = new CsvWriter(writer, System.Globalization.CultureInfo.InvariantCulture)) {&#10;            //    csv.WriteRecords(dataCollection.FindAll().ToList());&#10;            //}&#10;            return ReportBuilder.ToString();&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using System.Text;&#10;&#10;using ChatApp.Client;&#10;using LiteDB;&#10;namespace Chat.Tests {&#10;    public class ChatMicroserviceATester : BenchmarkTesterBase {&#10;        public ChatMicroserviceATester(string connectionString, int maxThreads, int maxMessages, int threadThrottle)&#10;            : base(connectionString, maxThreads, maxMessages, threadThrottle) {}&#10;&#10;        protected override void ExecuteBenchmarkThread(ILiteCollection&lt;Data&gt; dataCollection) {&#10;            var messagingClient = new HttpClient {&#10;                BaseAddress = new(Chat.Common.Addresses.CHAT_MESSAGING_SERVICE),&#10;                Timeout = TimeSpan.FromSeconds(200)&#10;            };&#10;            var historyClient = new HttpClient {&#10;                BaseAddress = new(Chat.Common.Addresses.CHAT_HISTORY_SERVICE),&#10;                Timeout = TimeSpan.FromSeconds(200)&#10;            };&#10;            var sender = usernames[rand.Next(usernames.Count)];&#10;            var receiver = usernames[rand.Next(usernames.Count)];&#10;            if (sender == receiver) return;&#10;            // Get room information&#10;            var getRoomStart = DateTime.UtcNow;&#10;            var roomId = messagingClient.GetRoomAsync(sender, [receiver]);&#10;            roomId.Wait(TimeSpan.FromSeconds(200));&#10;            var roomDuration = (float)(DateTime.UtcNow - getRoomStart).TotalMilliseconds;&#10;            dataCollection.Insert(new Data(runIndexIdentifier, &quot;microservice&quot;, &quot;/room&quot;, getRoomStart, roomDuration, sender, receiver));&#10;&#10;            // Get chat history&#10;            var getHistoryStart = DateTime.UtcNow;&#10;            var historyTask = historyClient.GetChatHistory(roomId.Result);&#10;            historyTask.Wait(TimeSpan.FromSeconds(200));&#10;            var histroyDuration = (float)(DateTime.UtcNow - getHistoryStart).TotalMilliseconds;&#10;            dataCollection.Insert(new Data(runIndexIdentifier, &quot;microservice&quot;, &quot;/history&quot;, getHistoryStart, histroyDuration, sender, receiver));&#10;&#10;            // Send messages&#10;            for (int msgIdx = 0; msgIdx &lt; msgCount; msgIdx++) {&#10;                var msgStart = DateTime.UtcNow;&#10;                var sendTask = messagingClient.SendMessageAsync(new(sender, roomId.Result, $&quot;{sender}:Message{msgIdx} -&gt; {receiver}&quot;, DateTime.UtcNow));&#10;                try {&#10;                    sendTask.Wait(TimeSpan.FromSeconds(200));&#10;                } catch (AggregateException) {&#10;                    continue;&#10;                }&#10;                var duration = (float)(DateTime.UtcNow - msgStart).TotalMilliseconds;&#10;                dataCollection.Insert(new Data(runIndexIdentifier, &quot;microservice&quot;, &quot;/send&quot;, msgStart, duration, sender, receiver));&#10;                Thread.Sleep(1000);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Chat.Tests/ChatMonolithATester.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Chat.Tests/ChatMonolithATester.cs" />
              <option name="originalContent" value="using System.Text;&#10;&#10;using ChatApp.Client;&#10;&#10;using LiteDB;&#10;namespace Chat.Tests;&#10;&#10;public class ChatMonolithATester : ATester {&#10;    string runIndexIdentifier;&#10;&#10;    List&lt;string&gt; usernames = new();&#10;&#10;    // Benchmark: Simuliere parallele NachrichtenÃ¼bertragung&#10;    Random rand = new();&#10;    List&lt;Thread&gt; threads = new();&#10;&#10;    string connectionString {get;set;}&#10;&#10;    int threadCount = 500;&#10;    int msgCount = 50;&#10;    int threadThrottle = 500;&#10;&#10;    DateTime startTime = DateTime.MinValue;&#10;    DateTime endTime = DateTime.MinValue;&#10;&#10;    public ChatMonolithATester(string connectionString, int maxThreads, int maxMessages, int threadThrottle) {&#10;        this.connectionString = connectionString;&#10;        this.threadThrottle = threadThrottle;&#10;        threadCount = maxThreads;&#10;        msgCount = maxMessages;&#10;        for (int i = 0; i &lt; 100; i++) {&#10;            usernames.Add($&quot;user{i + 1}&quot;);&#10;        }&#10;        runIndexIdentifier = Guid.NewGuid().ToString();&#10;    }&#10;    public override void Run() {&#10;        startTime = DateTime.UtcNow;&#10;        using (LiteDatabase db = new(connectionString)) {&#10;            var dataCollection = db.GetCollection&lt;Data&gt;(&quot;data&quot;);&#10;            for (int i = 0; i &lt; threadCount; i++) {&#10;                var thread = new Thread(() =&gt; {&#10;                    var client = new HttpClient {&#10;                        BaseAddress = new(Chat.Common.Addresses.CHAT_MONOLITH_SERVICE),&#10;                        Timeout = TimeSpan.FromSeconds(200)&#10;                    };&#10;                    var sender = usernames[rand.Next(usernames.Count)];&#10;                    var receiver = usernames[rand.Next(usernames.Count)];&#10;                    if (sender == receiver) return;&#10;                    // Get room information&#10;                    Console.WriteLine(&quot;Getting room for: &quot; + sender + &quot; -&gt; &quot; + receiver);&#10;                    var getRoomStart = DateTime.UtcNow;&#10;                    var roomId = client.GetRoomAsync(sender, [receiver]);&#10;                    roomId.Wait(TimeSpan.FromSeconds(200));&#10;                    var roomDuration = (float)(DateTime.UtcNow - getRoomStart).TotalMilliseconds;&#10;                    dataCollection.Insert(new Data(runIndexIdentifier, &quot;monolith&quot;, &quot;/getroom&quot;, getRoomStart, roomDuration, sender, receiver));&#10;&#10;                    Console.WriteLine(&quot;Getting chat history for: &quot; + sender + &quot; -&gt; &quot; + receiver);&#10;                    var getHistoryStart = DateTime.UtcNow;&#10;                    var historyTask = client.GetChatHistory(roomId.Result);&#10;                    historyTask.Wait(TimeSpan.FromSeconds(200));&#10;                    var histroyDuration = (float)(DateTime.UtcNow - getHistoryStart).TotalMilliseconds;&#10;                    dataCollection.Insert(new Data(runIndexIdentifier, &quot;monolith&quot;, &quot;/getmessages&quot;, getHistoryStart, histroyDuration, sender, receiver));&#10;&#10;                    // Sende mehrere Nachrichten und messe die Zeit pro Nachricht&#10;&#10;                    Console.WriteLine(&quot;Sending messages for: &quot; + sender + &quot; -&gt; &quot; + receiver);&#10;                    for (int msgIdx = 0; msgIdx &lt; msgCount; msgIdx++) {&#10;                        var msgStart = DateTime.UtcNow;&#10;                        var sendTask = client.SendMessageAsync(new(sender, roomId.Result, $&quot;{sender}:Message{msgIdx} -&gt; {receiver}&quot;, DateTime.UtcNow));&#10;                        try {&#10;                            sendTask.Wait(TimeSpan.FromSeconds(200));&#10;                        } catch (AggregateException ex) {&#10;                            // Fehlerbehandlung, z.B. Timeout&#10;                            continue;&#10;                        }&#10;                        var duration = (float)(DateTime.UtcNow - msgStart).TotalMilliseconds;&#10;                        dataCollection.Insert(new Data(runIndexIdentifier, &quot;monolith&quot;, &quot;/send&quot;, msgStart, duration, sender, receiver));&#10;                        Thread.Sleep(rand.Next(100, 2000));&#10;                    }&#10;                });&#10;                threads.Add(thread);&#10;                thread.Start();&#10;                Thread.Sleep(threadThrottle);&#10;            }&#10;            // Warten bis alle Threads fertig sind&#10;            foreach (var t in threads) t.Join();&#10;        }&#10;        endTime = DateTime.UtcNow;&#10;    }&#10;    public StringBuilder ReportBuilder { get; set; } = new StringBuilder();&#10;    public override string Report() {&#10;        using (LiteDatabase db = new(connectionString)) {&#10;            var dataCollection = db.GetCollection&lt;Data&gt;(&quot;data&quot;);&#10;            ReportBuilder.AppendLine($&quot;{nameof(ChatMonolithATester)} Benchmark Report&quot;);&#10;            ReportBuilder.AppendLine($&quot;Run Index Identifier: {runIndexIdentifier}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Anzahl Threads: {threadCount}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Anzahl Nachrichten pro Thread: {msgCount}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Thread Throttle: {threadThrottle} ms&quot;);&#10;            ReportBuilder.AppendLine($&quot;Startzeit: {startTime:HH:mm:ss.fff}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Endzeit: {endTime:HH:mm:ss.fff}&quot;);&#10;            ReportBuilder.AppendLine($&quot;Dauer: {(startTime - endTime).TotalSeconds:F3} Sekunden\n&quot;);&#10;            // Ergebnisse ausgeben&#10;            ReportBuilder.AppendLine($&quot;Benchmark abgeschlossen: {dataCollection.Count()} Requests verarbeitet&quot;);&#10;            //Console.WriteLine(&quot;Beispielmessungen:&quot;);&#10;            //foreach (var d in dataCollection.FindAll().Take(10)) {&#10;            //    Console.WriteLine($&quot;{d.timestamp:HH:mm:ss.fff} | {d.durationMs} ms | {d.sender} -&gt; {d.receiver}&quot;);&#10;            //}&#10;&#10;            // #report&#10;            var reportData = dataCollection.Find(x =&gt; x.runIndexIdentifier == runIndexIdentifier).ToList();&#10;&#10;            var groupedData = reportData&#10;                .GroupBy(d =&gt; d.endpoint)&#10;                .Select(g =&gt; new {&#10;                    Endpoint = g.Key,&#10;                    Count = g.Count(),&#10;                    AvgDuration = g.Average(d =&gt; d.durationMs),&#10;                    MinDuration = g.Min(d =&gt; d.durationMs),&#10;                    MaxDuration = g.Max(d =&gt; d.durationMs)&#10;                })&#10;                .ToList();&#10;&#10;            Console.WriteLine(&quot;Benchmark Report:&quot;);&#10;            foreach (var endpointData in groupedData) {&#10;                ReportBuilder.AppendLine($&quot;Endpoint: {endpointData.Endpoint}&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Requests: {endpointData.Count}&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Avg Duration: {endpointData.AvgDuration:F2} ms&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Min Duration: {endpointData.MinDuration:F2} ms&quot;);&#10;                ReportBuilder.AppendLine($&quot;  Max Duration: {endpointData.MaxDuration:F2} ms&quot;);&#10;            }&#10;&#10;&#10;            // Ergebnisse in CSV-Datei schreiben&#10;            //using (var writer = new StreamWriter(&quot;benchmark_results.csv&quot;))&#10;            //using (var csv = new CsvWriter(writer, System.Globalization.CultureInfo.InvariantCulture)) {&#10;            //    csv.WriteRecords(dataCollection.FindAll().ToList());&#10;            //}&#10;            return ReportBuilder.ToString();&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using System.Text;&#10;&#10;using ChatApp.Client;&#10;using LiteDB;&#10;namespace Chat.Tests {&#10;    public class ChatMonolithATester : BenchmarkTesterBase {&#10;        public ChatMonolithATester(string connectionString, int maxThreads, int maxMessages, int threadThrottle)&#10;            : base(connectionString, maxThreads, maxMessages, threadThrottle) {}&#10;&#10;        protected override void ExecuteBenchmarkThread(ILiteCollection&lt;Data&gt; dataCollection) {&#10;            var client = new HttpClient {&#10;                BaseAddress = new(Chat.Common.Addresses.CHAT_MONOLITH_SERVICE),&#10;                Timeout = TimeSpan.FromSeconds(200)&#10;            };&#10;            var sender = usernames[rand.Next(usernames.Count)];&#10;            var receiver = usernames[rand.Next(usernames.Count)];&#10;            if (sender == receiver) return;&#10;            // Get room information&#10;            var getRoomStart = DateTime.UtcNow;&#10;            var roomId = client.GetRoomAsync(sender, [receiver]);&#10;            roomId.Wait(TimeSpan.FromSeconds(200));&#10;            var roomDuration = (float)(DateTime.UtcNow - getRoomStart).TotalMilliseconds;&#10;            dataCollection.Insert(new Data(runIndexIdentifier, &quot;monolith&quot;, &quot;/getroom&quot;, getRoomStart, roomDuration, sender, receiver));&#10;&#10;            // Get chat history&#10;            var getHistoryStart = DateTime.UtcNow;&#10;            var historyTask = client.GetChatHistory(roomId.Result);&#10;            historyTask.Wait(TimeSpan.FromSeconds(200));&#10;            var histroyDuration = (float)(DateTime.UtcNow - getHistoryStart).TotalMilliseconds;&#10;            dataCollection.Insert(new Data(runIndexIdentifier, &quot;monolith&quot;, &quot;/getmessages&quot;, getHistoryStart, histroyDuration, sender, receiver));&#10;&#10;            // Send messages&#10;            for (int msgIdx = 0; msgIdx &lt; msgCount; msgIdx++) {&#10;                var msgStart = DateTime.UtcNow;&#10;                var sendTask = client.SendMessageAsync(new(sender, roomId.Result, $&quot;{sender}:Message{msgIdx} -&gt; {receiver}&quot;, DateTime.UtcNow));&#10;                try {&#10;                    sendTask.Wait(TimeSpan.FromSeconds(200));&#10;                } catch (AggregateException) {&#10;                    continue;&#10;                }&#10;                var duration = (float)(DateTime.UtcNow - msgStart).TotalMilliseconds;&#10;                dataCollection.Insert(new Data(runIndexIdentifier, &quot;monolith&quot;, &quot;/send&quot;, msgStart, duration, sender, receiver));&#10;                Thread.Sleep(rand.Next(100, 2000));&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>